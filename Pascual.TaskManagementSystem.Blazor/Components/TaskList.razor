@page "/tasks"
@using Pascual.TaskManagementSystem.Application.DTOs
@using Pascual.TaskManagementSystem.Blazor.Services
@inject TaskApiService TaskService

<h3>Task List</h3>

@if (tasks is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td><span class="badge bg-info">@task.Status</span></td>
                    <td><span class="badge bg-secondary">@task.Priority</span></td>
                    <td>@(task.DueDate?.ToShortDateString() ?? "-")</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditTask(task)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(task.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<TaskForm @ref="taskForm" OnTaskSaved="ReloadTasks" />
<ConfirmDialog @ref="confirmDialog" OnConfirm="DeleteConfirmed" />

@code {
    private List<TaskDTO>? tasks;
    private TaskForm? taskForm;
    private ConfirmDialog? confirmDialog;
    private Guid taskToDelete;

    protected override async Task OnInitializedAsync()
    {
        await ReloadTasks();
    }

    private async Task ReloadTasks()
    {
        tasks = await TaskService.GetAllTasksAsync();
        StateHasChanged();
    }

    private void EditTask(TaskDTO task)
    {
        taskForm?.Open(task);
    }

    private void ConfirmDelete(Guid id)
    {
        taskToDelete = id;
        confirmDialog?.Open("Are you sure you want to delete this task?");
    }

    private async Task DeleteConfirmed()
    {
        await TaskService.DeleteTaskAsync(taskToDelete);
        await ReloadTasks();
    }
}
