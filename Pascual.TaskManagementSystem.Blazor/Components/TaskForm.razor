@using Pascual.TaskManagementSystem.Application.DTOs
@using Pascual.TaskManagementSystem.Blazor.Services
@using static Pascual.TaskManagementSystem.Blazor.Services.ToastMessage

@inject ToastService Toast
@inject TaskApiService TaskService

<EditForm Model="@task" FormName="CreateUpdateTask" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-12">
            <label class="form-label">Title</label>
            <InputText class="form-control" @bind-Value="task.Title" />
        </div>

        <div class="col-12">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="task.Description" />
        </div>

        <div class="col-12 col-md-6">
            <label class="form-label">Status</label>
            <InputSelect class="form-select" @bind-Value="task.Status">
                <option value="ToDo">ToDo</option>
                <option value="InProgress">In Progress</option>
                <option value="Done">Done</option>
            </InputSelect>
        </div>

        <div class="col-12 col-md-6">
            <label class="form-label">Priority</label>
            <InputSelect class="form-select" @bind-Value="task.Priority">
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
            </InputSelect>
        </div>

        <div class="col-12 col-md-6">
            <label class="form-label">Due Date</label>
            <InputDate class="form-control" @bind-Value="task.DueDate" />
        </div>

        <div class="col-12 d-flex flex-column flex-sm-row gap-2 mt-2">
            <button type="submit" class="btn btn-success">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </div>
  
</EditForm>

@code {
    [Parameter] public EventCallback OnTaskSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; } 

    private TaskDTO task = new();
    private bool IsEditMode => task.Id != Guid.Empty;

    public void Open(TaskDTO? input = null)
    {
        if (input is null) 
        {
            task.Id = Guid.Empty;
            task.Title = string.Empty;
            task.Description = string.Empty;
            task.Status = "ToDo";
            task.Priority = "Low";
            task.CreatedDate = DateTime.Now;
            task.DueDate = null;
        }
        else 
        {
            task.Id = input.Id;
            task.Title = input.Title;
            task.Description = input.Description;
            task.Status = input.Status;
            task.Priority = input.Priority;
            task.CreatedDate = input.CreatedDate;
            task.DueDate = input.DueDate;
        }

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!IsEditMode)
            {
                task.Id = Guid.NewGuid();
                task.CreatedDate = DateTime.Now;
                await TaskService.CreateTaskAsync(task);
                Toast.ShowSuccess("Task created successfully.");
            }
            else
            {
                await TaskService.UpdateTaskAsync(task);
                Toast.ShowSuccess("Task updated successfully.");
            }

            await OnTaskSaved.InvokeAsync();
        }
        catch (HttpRequestException ex)
        {
            Toast.ShowError($"Network error: {ex.Message}");
           
        }
        catch (Exception ex)
        {
            Toast.ShowError($"Save Failed: {ex.Message}");
        }

   
    }

    private async Task Cancel()
    {
        task = new TaskDTO();
        await OnCancel.InvokeAsync();
    }
}
